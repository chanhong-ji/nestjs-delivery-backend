# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  id: Int!
  updatedAt: DateTime!
  createdAt: DateTime!
  name: String!
  restaurants: [Restaurant!]!
  restaurantCount: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DishOption {
  name: String!
  extra: Int!
}

type Dish {
  id: Int!
  updatedAt: DateTime!
  createdAt: DateTime!
  name: String!
  price: Int!
  photo: String!
  description: String
  restaurant: Restaurant!
  restaurantId: Int!
  dishOptions: [DishOption!]
}

type OrderItemOption {
  name: String!
}

type OrderItem {
  id: Int!
  updatedAt: DateTime!
  createdAt: DateTime!
  dish: Dish!
  choices: [OrderItemOption!]
}

type Order {
  id: Int!
  updatedAt: DateTime!
  createdAt: DateTime!
  customer: User
  customerId: Int!
  driver: User
  driverId: Int!
  restaurant: Restaurant
  restaurantId: Int!
  items: [OrderItem!]!
  total: Int!
  status: OrderStatus!
  address: String!
}

enum OrderStatus {
  Pending
  Cooking
  PickedUp
  Delivered
}

type Restaurant {
  id: Int!
  updatedAt: DateTime!
  createdAt: DateTime!
  name: String!
  coverImage: String
  address: String!
  category: Category
  owner: User!
  ownerId: Int!
  menu: [Dish!]!
}

type User {
  id: Int!
  updatedAt: DateTime!
  createdAt: DateTime!
  email: String!
  password: String!
  role: UserRole!
  verified: Boolean!
  restaurants: [Restaurant!]!
  orders: [Order!]!
  rides: [Order!]!
}

enum UserRole {
  Client
  Owner
  Delivery
}

type CreateAccountOutput {
  ok: Boolean!
  error: String
}

type LoginOutPut {
  ok: Boolean!
  error: String
  token: String
}

type PublicUser {
  id: Int!
  email: String!
  role: UserRole!
}

type UserProfileOutput {
  ok: Boolean!
  error: String
  user: PublicUser
}

type EditProfileOutput {
  ok: Boolean!
  error: String
  user: User
}

type VerifyCodeOutput {
  ok: Boolean!
  error: String
}

type CreateRestaurantOutput {
  ok: Boolean!
  error: String
}

type CreateCategoryOutput {
  ok: Boolean!
  error: String
}

type EditRestaurantOutput {
  ok: Boolean!
  error: String
}

type DeleteRestaurantOutput {
  ok: Boolean!
  error: String
}

type RestaurantOutput {
  ok: Boolean!
  error: String
  restaurant: Restaurant
}

type RestaurantsOutput {
  ok: Boolean!
  error: String
  totalPages: Int
  totalItems: Int
  result: [Restaurant!]
}

type SeeCategoriesOutput {
  ok: Boolean!
  error: String
  categories: [Category!]
}

type SearchRestaurantOutput {
  ok: Boolean!
  error: String
  totalPages: Int
  totalItems: Int
  result: [Restaurant!]
}

type CreateDishOutput {
  ok: Boolean!
  error: String
}

type EditDishOutput {
  ok: Boolean!
  error: String
}

type DeleteDishOutput {
  ok: Boolean!
  error: String
}

type CreateOrderOutput {
  ok: Boolean!
  error: String
}

type OrdersOutput {
  ok: Boolean!
  error: String
  totalPages: Int
  totalItems: Int
  result: [Order!]
}

type OrderOutput {
  ok: Boolean!
  error: String
  result: Order
}

type TakeOrderOutput {
  ok: Boolean!
  error: String
}

type PickUpOrderOutput {
  ok: Boolean!
  error: String
}

type DeliveredOrderOutput {
  ok: Boolean!
  error: String
}

type CancelOrderOutput {
  ok: Boolean!
  error: String
}

input orderItemOption {
  name: String!
}

type Query {
  me: User!
  userProfile(userId: Int!): UserProfileOutput!
  restaurant(id: Int!): RestaurantOutput!
  restaurants(page: Int! = 1, categoryId: Int!): RestaurantsOutput!
  searchRestaurant(page: Int! = 1, query: String!): SearchRestaurantOutput!
  seeCategories: SeeCategoriesOutput!
  orders(page: Int! = 1, status: OrderStatus): OrdersOutput!
  order(id: Int!): OrderOutput!
}

type Mutation {
  createAccount(email: String!, password: String!, role: UserRole!): CreateAccountOutput!
  login(email: String!, password: String!): LoginOutPut!
  editProfile(email: String, password: String, role: UserRole): EditProfileOutput!
  verifyEmailwithCode(code: String!): VerifyCodeOutput!
  createRestaurant(name: String!, coverImage: String, address: String!, categoryId: Int!): CreateRestaurantOutput!
  editRestaurant(name: String, coverImage: String, address: String, categoryId: Int, restaurantId: Int!): EditRestaurantOutput!
  deleteRestaurant(id: Int!): DeleteRestaurantOutput!
  createCategory(name: String!): CreateCategoryOutput!
  createDish(name: String!, price: Int!, photo: String!, description: String, restaurantId: Int!, dishOptions: [dishOption!]): CreateDishOutput!
  editDish(name: String, price: Int, photo: String, description: String, dishOptions: [dishOption!], id: Int!): EditDishOutput!
  deleteDish(id: Int!): DeleteDishOutput!
  createOrder(restaurantId: Int!, items: [createOrderItemInput!]!, total: Int, address: String!): CreateOrderOutput!
  takeOrder(id: Int!): TakeOrderOutput!
  pickUpOrder(id: Int!, driverId: Int!): PickUpOrderOutput!
  deliveredOrder(id: Int!): DeliveredOrderOutput!
  cancelOrder(id: Int!): CancelOrderOutput!
}

input dishOption {
  name: String!
  extra: Int! = 0
}

input createOrderItemInput {
  choices: [orderItemOption!]
  dishId: Int!
}